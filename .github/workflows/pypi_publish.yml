name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write  # Mandatory for trusted publishing

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for hatch-vcs

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Install hatch
        run: |
          uv tool install hatch

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Verify version consistency
        run: |
          # Get version from hatch (uses hatch-vcs to read from git tags)
          HATCH_VERSION=$(hatch version)
          # Get the release tag from GitHub
          GITHUB_TAG=${GITHUB_REF#refs/tags/}
          echo "Hatch version: $HATCH_VERSION"
          echo "GitHub release tag: $GITHUB_TAG"
          
          # Strip 'v' prefix from tag if present
          CLEAN_TAG=${GITHUB_TAG#v}
          
          # Check if hatch version matches the tag exactly
          if [[ "$HATCH_VERSION" == "$CLEAN_TAG" ]]; then
            echo "✅ Version consistency verified: $HATCH_VERSION"
          # Check if this is a dev version based on the tag (common with hatch-vcs)
          elif [[ "$HATCH_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.dev[0-9]+\+g[a-f0-9]+\.d[0-9]+ ]]; then
            echo "⚠️  Development version detected: $HATCH_VERSION"
            echo "This suggests there are commits after the tag $CLEAN_TAG"
            echo "Consider creating a proper release tag at the exact commit you want to release"
            exit 1
          else
            echo "❌ Version mismatch! Hatch: $HATCH_VERSION, Tag: $CLEAN_TAG"
            exit 1
          fi

      - name: Build release distributions
        run: hatch build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    environment:
      name: 'pypi'
      url: https://pypi.org/project/open-bedrock-server

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## Changes
            
            Please see the [changelog](CHANGELOG.md) for details.
            
            ## PyPI Package
            
            ```bash
            pip install open-bedrock-server==${{ github.ref_name }}
            ```
            
            ## Installation
            
            Visit the [PyPI package page](https://pypi.org/project/open-bedrock-server) for installation instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}